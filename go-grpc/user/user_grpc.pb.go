// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Normal CRUD operations
	CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersResponse, error)
	GetLargeUsersResponse(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersResponse, error)
	UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Empty, error)
	// Client Streaming RPCs
	CreateUsersStream(ctx context.Context, opts ...grpc.CallOption) (UserService_CreateUsersStreamClient, error)
	DeleteUsersStream(ctx context.Context, opts ...grpc.CallOption) (UserService_DeleteUsersStreamClient, error)
	// Server Streaming RPC
	GetUsersStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UserService_GetUsersStreamClient, error)
	// Bi-Directional Streaming RPC
	UpdateUsersStream(ctx context.Context, opts ...grpc.CallOption) (UserService_UpdateUsersStreamClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetLargeUsersResponse(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetLargeUsersResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUsersStream(ctx context.Context, opts ...grpc.CallOption) (UserService_CreateUsersStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/user.UserService/CreateUsersStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceCreateUsersStreamClient{stream}
	return x, nil
}

type UserService_CreateUsersStreamClient interface {
	Send(*UserRequest) error
	CloseAndRecv() (*UsersResponse, error)
	grpc.ClientStream
}

type userServiceCreateUsersStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceCreateUsersStreamClient) Send(m *UserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceCreateUsersStreamClient) CloseAndRecv() (*UsersResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) DeleteUsersStream(ctx context.Context, opts ...grpc.CallOption) (UserService_DeleteUsersStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], "/user.UserService/DeleteUsersStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceDeleteUsersStreamClient{stream}
	return x, nil
}

type UserService_DeleteUsersStreamClient interface {
	Send(*UserID) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type userServiceDeleteUsersStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceDeleteUsersStreamClient) Send(m *UserID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceDeleteUsersStreamClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUsersStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UserService_GetUsersStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], "/user.UserService/GetUsersStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUsersStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetUsersStreamClient interface {
	Recv() (*UserResponse, error)
	grpc.ClientStream
}

type userServiceGetUsersStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUsersStreamClient) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) UpdateUsersStream(ctx context.Context, opts ...grpc.CallOption) (UserService_UpdateUsersStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[3], "/user.UserService/UpdateUsersStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceUpdateUsersStreamClient{stream}
	return x, nil
}

type UserService_UpdateUsersStreamClient interface {
	Send(*UserRequest) error
	Recv() (*UserResponse, error)
	grpc.ClientStream
}

type userServiceUpdateUsersStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceUpdateUsersStreamClient) Send(m *UserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceUpdateUsersStreamClient) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// Normal CRUD operations
	CreateUser(context.Context, *UserRequest) (*UserResponse, error)
	GetUsers(context.Context, *Empty) (*UsersResponse, error)
	GetLargeUsersResponse(context.Context, *Empty) (*UsersResponse, error)
	UpdateUser(context.Context, *UserRequest) (*UserResponse, error)
	DeleteUser(context.Context, *UserID) (*Empty, error)
	// Client Streaming RPCs
	CreateUsersStream(UserService_CreateUsersStreamServer) error
	DeleteUsersStream(UserService_DeleteUsersStreamServer) error
	// Server Streaming RPC
	GetUsersStream(*Empty, UserService_GetUsersStreamServer) error
	// Bi-Directional Streaming RPC
	UpdateUsersStream(UserService_UpdateUsersStreamServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUsers(context.Context, *Empty) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServiceServer) GetLargeUsersResponse(context.Context, *Empty) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLargeUsersResponse not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *UserID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) CreateUsersStream(UserService_CreateUsersStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateUsersStream not implemented")
}
func (UnimplementedUserServiceServer) DeleteUsersStream(UserService_DeleteUsersStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteUsersStream not implemented")
}
func (UnimplementedUserServiceServer) GetUsersStream(*Empty, UserService_GetUsersStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersStream not implemented")
}
func (UnimplementedUserServiceServer) UpdateUsersStream(UserService_UpdateUsersStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateUsersStream not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetLargeUsersResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetLargeUsersResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetLargeUsersResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetLargeUsersResponse(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUsersStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).CreateUsersStream(&userServiceCreateUsersStreamServer{stream})
}

type UserService_CreateUsersStreamServer interface {
	SendAndClose(*UsersResponse) error
	Recv() (*UserRequest, error)
	grpc.ServerStream
}

type userServiceCreateUsersStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceCreateUsersStreamServer) SendAndClose(m *UsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceCreateUsersStreamServer) Recv() (*UserRequest, error) {
	m := new(UserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_DeleteUsersStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).DeleteUsersStream(&userServiceDeleteUsersStreamServer{stream})
}

type UserService_DeleteUsersStreamServer interface {
	SendAndClose(*Empty) error
	Recv() (*UserID, error)
	grpc.ServerStream
}

type userServiceDeleteUsersStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceDeleteUsersStreamServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceDeleteUsersStreamServer) Recv() (*UserID, error) {
	m := new(UserID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_GetUsersStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetUsersStream(m, &userServiceGetUsersStreamServer{stream})
}

type UserService_GetUsersStreamServer interface {
	Send(*UserResponse) error
	grpc.ServerStream
}

type userServiceGetUsersStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUsersStreamServer) Send(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_UpdateUsersStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).UpdateUsersStream(&userServiceUpdateUsersStreamServer{stream})
}

type UserService_UpdateUsersStreamServer interface {
	Send(*UserResponse) error
	Recv() (*UserRequest, error)
	grpc.ServerStream
}

type userServiceUpdateUsersStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceUpdateUsersStreamServer) Send(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceUpdateUsersStreamServer) Recv() (*UserRequest, error) {
	m := new(UserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "GetLargeUsersResponse",
			Handler:    _UserService_GetLargeUsersResponse_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateUsersStream",
			Handler:       _UserService_CreateUsersStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteUsersStream",
			Handler:       _UserService_DeleteUsersStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUsersStream",
			Handler:       _UserService_GetUsersStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateUsersStream",
			Handler:       _UserService_UpdateUsersStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
